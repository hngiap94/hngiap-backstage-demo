name: Build Backstage Image

on:
  workflow_dispatch:

env:
  APP_DOMAIN: ${{ vars.APP_DOMAIN }}
  DOCKER_IMAGE_TAG: ${{ vars.DOCKER_IMAGE_TAG }}
  VERSION: ${{ vars.DOCKER_IMAGE_TAG }}
  NODE_OPTIONS: ${{ vars.NODE_OPTIONS }}
  POSTGRES_HOST: ${{ vars.POSTGRES_HOST }}
  POSTGRES_PORT: ${{ vars.POSTGRES_PORT }}
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BUCKET_NAME: ${{ vars.BUCKET_NAME }}
  GITHUB_TOKEN: ${{ secrets.AUTH_GITHUB_TOKEN }}
  AUTH_GITHUB_CLIENT_ID: ${{ secrets.AUTH_GITHUB_CLIENT_ID }}
  AUTH_GITHUB_CLIENT_SECRET: ${{ secrets.AUTH_GITHUB_CLIENT_SECRET }}

jobs:
  tf_deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    steps:

    - name: Checkout Repo
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Host Build
      run: |
        yarn install --frozen-lockfile
        yarn tsc
        yarn build:backend --config ../../app-config.yaml

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_DEFAULT_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build And Push Docker Image
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ vars.AWS_ECR_REPOSITORY }}
      run: |
        docker image build . -f packages/backend/Dockerfile -t $REGISTRY/$REPOSITORY:${{ vars.DOCKER_IMAGE_TAG }}
        docker push $REGISTRY/$REPOSITORY:${{ vars.DOCKER_IMAGE_TAG }}